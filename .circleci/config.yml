version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-2
  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
      - run:
          name: Install Node.js 13.8.0
          command: |
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            sudo npm install --global n
            sudo n 13.8.0
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  revert_migrations:
    description: Revert the last migration, if any were executed during the current workflow
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi


orbs:
  slack: circleci/slack@4.12.1
jobs:
  # build-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: Build front-end
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build

  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: Build back-end
  #         command: |
  #           cd backend
  #           npm install
  #           npm run build
  #     - slack/notify:
  #         channel: ALX-C3
  #         event: fail
  #         template: basic_fail_1
  # test-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: Run Frontend test
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run test
  # test-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: Run Backend test
  #         command: |
  #           cd backend
  #           npm install
  #           npm run test
  
  # scan-frontend:
  #   docker: 
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name:
  #         command: |
  #           cd frontend
  #           npm install
  #           npm audit fix --audit-level=critical --force
  #           npm audit fix --force
  
  # scan-backend:
  #   docker:
  #     - image: circleci/node:13.8.0 
  #   steps:
  #     - checkout
  #     - run:
  #         name:
  #         command: |
  #           cd backend
  #           npm install
  #           npm audit fix --audit-level=critical --force
  #           npm audit fix --force
  # deploy-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Ensure back-end infrastructure exists
  #         command: |
  #           aws --version
  #           yum -y install tar gzip
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/backend.yml \
  #             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --region us-east-2 \
  #             --parameter-overrides ID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --tags project=udapeople
  #     - run:
  #         name: Ensure front-end infrastructure exist
  #         command: |
  #           yum -y install tar gzip
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/frontend.yml \
  #             --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --region us-east-2 \
  #             --parameter-overrides ID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --tags project=udapeople 
  #     - run:
  #         name: Add back-end IP to ansible inventory
  #         command: |
  #           touch inventory.txt
  #           echo [web] > ~/inventory.txt
  #           aws ec2 describe-instances \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --filters "Name=tag:project,Values=udapeople" \
  #             --region us-east-2 \
  #             --output text >> ~/inventory.txt
  #           cat ~/inventory.txt
        
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - inventory.txt
  
  configure-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d9:fa:a4:50:72:4b:e4:74:8e:37:85:a8:2e:98:94:9e"]
      # - attach_workspace:
      #     at: ~/
      # - run: 
      #     name: Open Inventory file
      #     command: |
      #       echo "$PWD"
      #       ls
      #       cat ~/inventory.txt
      # - run:
      #     name: Install dependencies
      #     command: |
      #       python -m pip install tar gzip
      - run:
          name: Install Ansible
          command: |
            python -m pip install --user ansible
            python -m pip install awscli
      - run:
          name: Run Playbook and Configure Server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
  run-migrations:
    docker:
      - image: cimg/python:3.10 
    steps:
      - checkout
      - install_nodejs
      - revert_migrations
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install --no-audit --no-fund
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt 
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "No migrations are pending"
            fi
  deploy-frontend:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
        name: Install dependencies
        command: |
          cd frontend
          npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --region us-east-2 \
              --output text)
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - revert-migrations
  deploy-backend:
    docker:
      - image: cimg/python:3.10
    steps: 
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Install Ansible
          command: |
            python -m pip install --user ansible
      - add_ssh_keys:
          fingerprints: ["d9:fa:a4:50:72:4b:e4:74:8e:37:85:a8:2e:98:94:9e"]
      - run:
          name: Install Dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations





workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      #- deploy-infrastructure:
        #  requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure
          #requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]